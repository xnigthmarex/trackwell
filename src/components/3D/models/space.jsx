/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/model/galaxy/scene.gltf 
Author: LoÃ¯c Norgeot (https://sketchfab.com/norgeotloic)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/need-some-space-d6521362b37b48e3a82bce4911409303
Title: Need some space?
*/

"use client"
import * as THREE from 'three'
import { Points, useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { useMemo, useRef } from 'react'



export default function Galaxy(props) {
  const ref = useRef();
  const galaxyCenterLightRef = useRef();
  const { nodes } = useGLTF('/model/galaxy/scene.gltf') 
  const [positions, colors] = useMemo(() => {
    nodes.Object_2.geometry.center()
    const positions = new Float32Array(
      nodes.Object_2.geometry.attributes.position.array.buffer
    )
    const colors = new Float32Array(positions.length)

    const getDistanceToCenter = (x, y, z) =>
      Math.sqrt(x * x + y * y + z * z)

    const color = new THREE.Color()
    for (let i = 0; i < positions.length; i += 3) {
      const x = positions[i]
      const y = positions[i + 1]
      const z = positions[i + 2]
      const distanceToCenter = getDistanceToCenter(x, y, z)
      const normalizedDistanceToCenter = distanceToCenter / 100

      
      color.setRGB(
        Math.cos(normalizedDistanceToCenter-10),
        THREE.MathUtils.randFloat(0,0.8),
        Math.sin(normalizedDistanceToCenter-400)
      )
      color.toArray(colors, i)
    }

    return [positions, colors]
  }, [nodes])

  useFrame(({ clock }) => {
    ref.current.rotation.z = clock.getElapsedTime() / 5;
    ref.current.scale.setScalar(Math.sin(clock.getElapsedTime() / 10) + 1.4);
  })

 
  return (
    <group {...props} dispose={null} ref={ref}>
      <pointLight
        position={[0, 0, 0]}
        ref={galaxyCenterLightRef}
        intensity={5}
      />
      <Points scale={0.05} positions={positions} colors={colors}>
        <pointsMaterial
          
          
          depthWrite={false}
          vertexColors
          opacity={0.7}
          depthTest
          size={0.02}
        />
      </Points>
      
        
      
     
    </group>
  )
}

useGLTF.preload('/model/galaxy/scene.gltf')